-- Create a database for predictive maintenance
CREATE DATABASE IF NOT EXISTS PRED_MAINT_DB;

-- Create a schema for equipment and sensor data
USE DATABASE PRED_MAINT_DB;
CREATE SCHEMA EQUIPMENT_SCHEMA;

-- Create a table for equipment details
CREATE TABLE EQUIPMENT (
    EQUIPMENT_ID INT,
    NAME VARCHAR(100),
    TYPE VARCHAR(50),
    INSTALL_DATE DATE
);

-- Create a table for sensor readings
CREATE TABLE SENSOR_DATA (
    SENSOR_ID INT,
    EQUIPMENT_ID INT,
    READING_TIMESTAMP TIMESTAMP,
    TEMPERATURE FLOAT,
    VIBRATION FLOAT,
    PRESSURE FLOAT
);

-- Create a table for maintenance records
CREATE TABLE MAINTENANCE_LOGS (
    MAINTENANCE_ID INT,
    EQUIPMENT_ID INT,
    MAINTENANCE_DATE DATE,
    MAINTENANCE_TYPE VARCHAR(100),
    DESCRIPTION VARCHAR(200)
);

-- Create a table for parts inventory
CREATE TABLE PARTS (
    PART_ID INT,
    PART_NAME VARCHAR(100),
    PART_TYPE VARCHAR(50)
);

-- Create a table for technicians
CREATE TABLE TECHNICIANS (
    TECHNICIAN_ID INT,
    TECHNICIAN_NAME VARCHAR(100),
    SPECIALIZATION VARCHAR(100)
);

-- Create a table for maintenance and parts
CREATE TABLE MAINTENANCE_PARTS (
    MAINTENANCE_ID INT,
    PART_ID INT,
    QUANTITY INT
);


-- Insert data into EQUIPMENT
INSERT INTO EQUIPMENT (EQUIPMENT_ID, NAME, TYPE, INSTALL_DATE) VALUES
(1, 'Pump 1', 'Pump', '2019-06-15'),
(2, 'Conveyor 1', 'Conveyor', '2020-01-20'),
(3, 'Compressor 1', 'Compressor', '2018-08-08');

-- Insert data into SENSOR_DATA
INSERT INTO SENSOR_DATA (SENSOR_ID, EQUIPMENT_ID, READING_TIMESTAMP, TEMPERATURE, VIBRATION, PRESSURE) VALUES
(101, 1, CURRENT_TIMESTAMP(), 70.0, 0.1, 30.0),
(102, 2, CURRENT_TIMESTAMP(), 65.0, 0.2, 20.0),
(103, 3, CURRENT_TIMESTAMP(), 75.0, 0.15, 25.0),
(104, 3, CURRENT_TIMESTAMP(), 95.0, 0.5, 50.0);

-- Insert data into MAINTENANCE_LOGS
INSERT INTO MAINTENANCE_LOGS (MAINTENANCE_ID, EQUIPMENT_ID, MAINTENANCE_DATE, MAINTENANCE_TYPE, DESCRIPTION) VALUES
(1, 1, '2023-04-01', 'Routine Check', 'Oil and filter change'),
(2, 2, '2023-04-01', 'Emergency Repair', 'Belt replacement'),
(3, 3, '2023-04-01', 'Routine Check', 'Pressure valve inspection');

-- Insert data into PARTS
INSERT INTO PARTS (PART_ID, PART_NAME, PART_TYPE) VALUES
(501, 'Filter', 'Consumable'),
(502, 'Belt', 'Replaceable'),
(503, 'Valve', 'Critical');

-- Insert data into TECHNICIANS
INSERT INTO TECHNICIANS (TECHNICIAN_ID, TECHNICIAN_NAME, SPECIALIZATION) VALUES
(401, 'John Doe', 'Mechanical'),
(402, 'Jane Smith', 'Electrical'),
(403, 'Emily Taylor', 'Hydraulic');

-- Insert data into MAINTENANCE_PARTS
INSERT INTO MAINTENANCE_PARTS (MAINTENANCE_ID, PART_ID, QUANTITY) VALUES
(1, 501, 2),
(2, 502, 1),
(3, 503, 3);


-- Query to detect possible maintenance needs based on sensor thresholds
SELECT E.EQUIPMENT_ID, E.NAME, S.TEMPERATURE, S.VIBRATION, S.PRESSURE
FROM EQUIPMENT E
JOIN SENSOR_DATA S ON E.EQUIPMENT_ID = S.EQUIPMENT_ID
WHERE S.TEMPERATURE > 80 OR S.VIBRATION > 0.3 OR S.PRESSURE > 40;

-- Query to analyze maintenance history and predict future dates
SELECT E.EQUIPMENT_ID, E.NAME, MAX(M.MAINTENANCE_DATE) AS LAST_MAINTENANCE_DATE
FROM EQUIPMENT E
JOIN MAINTENANCE_LOGS M ON E.EQUIPMENT_ID = M.EQUIPMENT_ID
GROUP BY E.EQUIPMENT_ID, E.NAME;

set lqid = (select last_query_id());

select * from table(get_query_operator_stats($lqid));

-- Adding TECHNICIAN_ID to the MAINTENANCE_LOGS table
ALTER TABLE MAINTENANCE_LOGS ADD COLUMN TECHNICIAN_ID INT;

-- Update the table with technician IDs
UPDATE MAINTENANCE_LOGS SET TECHNICIAN_ID = 401 WHERE MAINTENANCE_ID = 1;
UPDATE MAINTENANCE_LOGS SET TECHNICIAN_ID = 402 WHERE MAINTENANCE_ID = 2;
UPDATE MAINTENANCE_LOGS SET TECHNICIAN_ID = 403 WHERE MAINTENANCE_ID = 3;


-- Extensive query across all tables to fetch a detailed maintenance report
SELECT 
    E.NAME AS EQUIPMENT_NAME,
    M.MAINTENANCE_DATE,
    T.TECHNICIAN_NAME,
    P.PART_NAME,
    MP.QUANTITY AS PARTS_USED,
    M.DESCRIPTION AS MAINTENANCE_DETAILS
FROM EQUIPMENT E
JOIN MAINTENANCE_LOGS M ON E.EQUIPMENT_ID = M.EQUIPMENT_ID
JOIN TECHNICIANS T ON M.TECHNICIAN_ID = T.TECHNICIAN_ID
JOIN MAINTENANCE_PARTS MP ON M.MAINTENANCE_ID = MP.MAINTENANCE_ID
JOIN PARTS P ON MP.PART_ID = P.PART_ID
ORDER BY M.MAINTENANCE_DATE DESC, E.NAME;

SELECT * FROM TABLE(
    EXPLAIN_JSON(
        SYSTEM$EXPLAIN_PLAN_JSON(
           'SELECT 
    E.NAME AS EQUIPMENT_NAME,
    M.MAINTENANCE_DATE,
    T.TECHNICIAN_NAME,
    P.PART_NAME,
    MP.QUANTITY AS PARTS_USED,
    M.DESCRIPTION AS MAINTENANCE_DETAILS
FROM EQUIPMENT E
JOIN MAINTENANCE_LOGS M ON E.EQUIPMENT_ID = M.EQUIPMENT_ID
JOIN TECHNICIANS T ON M.TECHNICIAN_ID = T.TECHNICIAN_ID
JOIN MAINTENANCE_PARTS MP ON M.MAINTENANCE_ID = MP.MAINTENANCE_ID
JOIN PARTS P ON MP.PART_ID = P.PART_ID
ORDER BY M.MAINTENANCE_DATE DESC, E.NAME')
        )
    );

set lid = last_query_id();

select
        operator_id,
        operator_attributes,
        operator_statistics:output_rows / operator_statistics:input_rows as row_multiple
    from table(get_query_operator_stats($lid))
    where operator_type = 'Join'
    order by step_id, operator_id;

SELECT * FROM TABLE (get_query_operator_stats($lid));

-- Dropping tables
DROP TABLE IF EXISTS EQUIPMENT;
DROP TABLE IF EXISTS SENSOR_DATA;
DROP TABLE IF EXISTS MAINTENANCE_LOGS;

-- Dropping schema and database
DROP SCHEMA IF EXISTS EQUIPMENT_SCHEMA;
DROP DATABASE IF EXISTS PRED_MAINT_DB;
